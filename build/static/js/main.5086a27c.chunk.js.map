{"version":3,"sources":["components/field/player.js","components/field/playercard.js","components/field/score.js","components/field/field.js","App.js","serviceWorker.js","index.js"],"names":["Player","handleClick","props","onPlayerClick","index","className","src","this","player","image","alt","onClick","Component","PlayerCard","players","map","key","Score","score","shuffle","array","a","sort","Math","random","value","b","playerList","picked","Board","state","clicked","setState","user","current","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5086a27c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nexport default class Player extends Component {\n\n    handleClick = () => {\n        this.props.onPlayerClick(this.props.index);\n    }\n\n    render() {\n        return (\n            <div className=\"player-card\">\n                <img\n                    src={this.props.player.image}\n                    alt=\"player-card\"\n                    className=\"card-image\"\n                    onClick={this.handleClick} />\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport Player from './player';\n\nconst PlayerCard = (props) => {\n    return (\n        <div className=\"player-cards\">\n            {props.players.map((player, index) => <Player player={player} index={index} onPlayerClick={props.onPlayerClick} key={player.image} />)}\n        </div>\n    )\n};\n\nexport default PlayerCard;","import React from 'react';\n\nconst Score = (props) => (<div className=\"score\">Score: {props.score}</div>);\n\nexport default Score;","import React, { Component } from 'react';\nimport PlayerBox from './playercard';\nimport Score from './score';\n\n// shuffle from SO archives\nconst shuffle = array => (\n    array\n        .map((a) => ({ sort: Math.random(), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value)\n);\n\nconst playerList = [\n    { image: 'assets/cards/aaron.png', picked: false },\n    { image: 'assets/cards/spahn.png', picked: false },\n    { image: 'assets/cards/banks.png', picked: false },\n    { image: 'assets/cards/robinson.png', picked: false },\n    { image: 'assets/cards/boyer.png', picked: false },\n    { image: 'assets/cards/clemente.png', picked: false },\n    { image: 'assets/cards/lopez.png', picked: false },\n    { image: 'assets/cards/gomez.png', picked: false },\n    { image: 'assets/cards/brewer.png', picked: false },\n    { image: 'assets/cards/diering.png', picked: false },\n    { image: 'assets/cards/donovan.png', picked: false },\n    { image: 'assets/cards/face.png', picked: false },\n    { image: 'assets/cards/finigan.png', picked: false },\n    { image: 'assets/cards/turley.png', picked: false },\n    { image: 'assets/cards/hatton.png', picked: false }\n]\n\nexport default class Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                score: 0\n            },\n            players: shuffle(playerList)\n        };\n    }\n\n    onPlayerClick = (index) => {\n        if (!this.state.players[index].clicked) {\n            this.setState({\n                players: shuffle(this.state.players.map((player, current) => {\n                    return (current === index) ? { ...player, clicked: true } : player\n                })),\n                user: {\n                    ...this.state.user,\n                    score: this.state.user.score + 1\n                }\n            });\n        } else {\n            this.setState({\n                players: shuffle(this.state.players.map(player => { return { ...player, clicked: false } })),\n                user: {\n                    ...this.state.user,\n                    score: 0\n                }\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Field\">\n                <div class=\"header\">\n                    <h2>Baseball Legends Memory Game!</h2>\n                    <h4>Click on each baseball legend's card only once! After you pick the cards will be reshuffled.<br />Can you pick all 15 without duplicates? Your score is consecutive picks without selecting the same card twice.</h4>\n                    <Score\n                        score={this.state.user.score} />\n                </div>\n                <PlayerBox\n                    players={this.state.players}\n                    onPlayerClick={this.onPlayerClick} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Board from './components/field/field';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}